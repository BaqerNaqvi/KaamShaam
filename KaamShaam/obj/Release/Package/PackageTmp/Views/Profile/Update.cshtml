@using Microsoft.AspNet.Identity
@model KaamShaam.LocalModels.ProfileWraperModel
<!--************************************
        Inner Page Banner Start
*************************************-->
<div class="tg-innerpagebanner">
    <div class="container">
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="tg-pagetitle">
                    <h1>Dashboard Profile setting</h1>
                </div>
                <ol class="tg-breadcrumb">
                    <li><a href="#">Home</a></li>
                    <li class="tg-active">Dashboard Profile setting</li>
                </ol>
            </div>
        </div>
    </div>
</div>
<style>
    .avatarThumb {
        min-width: 90px;
    height: 106px;
    max-width: 90px;
    max-height: 106px;
    margin-top: 12px;
    width: 90px;
    min-height: 90px;
    }

     .customField {
         margin-left: 45px !important;
     }

    #map {
        height: 50%;
    }
    /* Optional: Makes the sample page fill the window. */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
    }

    .modal-backdrop {
        z-index: 10;
    }

    ​ #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
        z-index: 20;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

    .pac-controls label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
    }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
    }

    #pac-input:focus {
        border-color: #4d90fe;
    }

    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }

    #target {
        width: 345px;
    }

    .modal {
        z-index: 20;
    }
</style>
<!--************************************
        Inner Page Banner End
*************************************-->
<!--************************************
Main Start
*************************************-->
@{
    string baseUrl = Request.Url.Scheme + "://" + Request.Url.Authority +
                            Request.ApplicationPath.TrimEnd('/') + "/Images/";
}
<main id="tg-main" class="tg-main tg-haslayout">
    <div class="container">
        <div class="row">
            <div id="tg-twocolumns" class="tg-twocolumns">
                @{ Html.RenderPartial("LeftMenu");}

                <style>
                    tr {
                        line-height: 10%;
                        min-height: 49px;
                        height: 50px;
                    }

                    td {
                        vertical-align: middle !important;
                    }

                    .infoeditDiv {
                        float: left;
                        margin-left: 12px;
                    }
                </style>
                <div class="col-xs-12 col-sm-7 col-md-8 col-lg-9 text-center">
                    <div id="tg-content" class="tg-content">
                        <div class="tg-dashboard tg-dashboardprofilesetting">
                            <form class="tg-themeform">
                                <fieldset>

                                    <div class="tg-dashboardbox tg-basicinformation">
                                        <div class="tg-dashboardtitle">
                                            <h2>Basic Information</h2>
                                            <div class="infoeditDiv">[<a onclick="openEditBasicInfoModel()" href="#" data-toggle="modal" data-target="#basicInfoModel">Edit</a>]</div>
                                        </div>
                                        <table class="table table-striped">
                                            <tbody>
                                                <tr>
                                                    <td class="col-lg-2"><strong>Full Name</strong></td>
                                                    <td class="col-lg-10" id="td-fullname">@Model.BasicInfo.FullName</td>
                                                </tr>
                                                <tr>
                                                    <td class="col-lg-2"><strong>CNIC</strong></td>
                                                    <td class="col-lg-10" id="td-CNIC">@Model.BasicInfo.CNIC</td>
                                                </tr>
                                                <tr>
                                                    <td class="col-lg-2"><strong>Mobile</strong></td>
                                                    <td class="col-lg-10" id="td-mobile">@Model.BasicInfo.Mobile</td>
                                                </tr>
                                                <tr>
                                                    <td class="col-lg-2"><strong>Email</strong></td>
                                                    <td class="col-lg-10" id="td-email">@Model.BasicInfo.Email</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>

                                    @if (Model.BasicInfo.Type == "ContractorNew")
                                    {
                                        <div class="tg-dashboardbox tg-basicinformation">
                                            <div class="tg-dashboardtitle">
                                                <h2>Contractual Information</h2>
                                                <div class="infoeditDiv" onclick="openEditContractorModel()">[<a href="#" data-toggle="modal" data-target="#companyModel">Edit</a>]</div>
                                            </div>
                                            <table class="table table-striped">
                                                <tbody>
                                                    <tr>
                                                        <td class="col-lg-2"><strong>Category</strong></td>
                                                        <td class="col-lg-10" id="td-cate" data-catId="@Model.BasicInfo.CategoryId">@Model.BasicInfo.CategoryName </td>
                                                    </tr>
                                                    <tr>
                                                        <td class="col-lg-2"><strong>Contractor</strong></td>
                                                        <td class="col-lg-10" id="td-companyname" data-conId="@Model.BasicInfo.ContractorId">@Model.BasicInfo.CompanyName </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    }

                                    @*<div class="tg-dashboardbox tg-basicinformation">
                                        <div class="tg-dashboardtitle">
                                            <h2>Location</h2>
                                            <div class="infoeditDiv">[<a href="#" data-toggle="modal" data-target="#locationModel" onclick=" openMapforProfile() ">Edit</a>]
                                            </div>

                                        </div>
                                        <table class="table table-striped">
                                            <tbody>
                                            <tr>
                                                <td class="col-lg-2"><strong>Country/City</strong></td>
                                                <td class="col-lg-10"><span id="td-country">@Model.BasicInfo.Country</span> / <span id="td-city">@Model.BasicInfo.City</span> </td>
                                            </tr>
                                            <tr>
                                                @{
                                                    var cords = Model.BasicInfo.Location.Latitude + "_" + Model.BasicInfo.Location.Longitude;
                                                }
                                                <td class="col-lg-2"><strong>Address</strong></td>
                                                <td class="col-lg-10" id="td-address">@Model.BasicInfo.LocationName</td>
                                                <input type="hidden" id="td-cords" value=@cords/>
                                            </tr>
                                            </tbody>
                                        </table>
                                    </div>*@

                                    <div class="tg-dashboardbox tg-basicinformation">
                                        <div class="tg-dashboardtitle">
                                            <h2>Other Information</h2>
                                            <div class="infoeditDiv" onclick="openEditOtherInfoModel()">[<a href="#" data-toggle="modal" data-target="#otherInfoModel">Edit</a>]
                                            </div>

                                        </div>
                                        <table class="table table-striped">
                                            <tbody>
                                            <tr>
                                                <td class="col-lg-2"><strong>Introduction</strong></td>
                                                <td class="col-lg-10" id="td-intro">@Model.BasicInfo.Intro </td>
                                            </tr>
                                            <tr>
                                                <td class="col-lg-2"><strong>Language</strong></td>
                                                <td class="col-lg-10" id="td-lang">@Model.BasicInfo.Language </td>
                                            </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                    

                                    <div id="tg-updateall-tempo" class="tg-updateall" style="border: 1px solid red;height: 60px;">
                                        <div class="tg-holder" style="margin-right: 8%;">
                                            <span class="tg-note" style="margin-left: 8%;">* Click <strong>Update Now</strong> to update latest added detail (s).</span>
                                            <a class="tg-btn" href="#" onclick="updateProfile()">Update Now</a>
                                        </div>
                                    </div>

                                </fieldset>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>
<!-- basic info -->
<div class="modal fade" id="basicInfoModel" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                <h3 class="modal-title" >Edit Basic Information</h3>
            </div>
            <div class="modal-body" style="height: 386px; padding: 4%;">

                <!-- content goes here -->
                <div class="form-group">
                    <label> Full Name</label>
                    <input type="text" class="form-control binfoVal" id="bi-fullname">
                </div>

                <div class="form-group">
                    <label > CNIC</label>
                    <input type="text" class="form-control binfoVal" id="bi-cnic">
                </div>
                <div class="form-group">
                    <label > Mobile</label>
                    <input type="text" class="form-control binfoVal" id="bi-mobile">
                </div>
                <div class="form-group">
                    <label > Email</label>
                    <input type="email" class="form-control binfoVal" id="bi-email" readonly="">
                </div>

            </div>
            <div class="modal-footer">
                <div class="btn-group btn-group-justified" role="group" aria-label="group button">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-default" data-dismiss="modal" role="button">Close</button>
                    </div>

                    <div class="btn-group" role="group">
                        <button type="button" id="save-Basic-info-btn" class="btn btn-primary btn-hover-green" data-action="save" role="button" onclick="saveBasicInfo()">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Location info -->
<div class="modal fade" id="locationModel" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                <h3 class="modal-title">Edit Location Information</h3>
            </div>
            <div class="modal-body" style="height: 386px; padding: 4%; margin-top: -18px;">
                @{
                    List<SelectListItem> items = new List<SelectListItem>();
                    items.Add(new SelectListItem {Text = "Afghanistan", Value = "Afghanistan"});
                    items.Add(new SelectListItem {Text = "Azerbaijan", Value = "Azerbaijan"});
                    items.Add(new SelectListItem {Text = "Bahrain", Value = "Bahrain"});
                    items.Add(new SelectListItem {Text = "Bangladesh", Value = "Bangladesh"});
                    items.Add(new SelectListItem {Text = "China", Value = "China"});
                    items.Add(new SelectListItem {Text = "Cyprus", Value = "Cyprus"});
                    items.Add(new SelectListItem {Text = "India", Value = "India"});
                    items.Add(new SelectListItem {Text = "Indonesia", Value = "Indonesia"});
                    items.Add(new SelectListItem {Text = "Iran", Value = "Iran"});
                    items.Add(new SelectListItem {Text = "Iraq", Value = "Iraq"});
                    items.Add(new SelectListItem {Text = "Kuwait", Value = "Kuwait"});
                    items.Add(new SelectListItem {Text = "Pakistan", Value = "Pakistan", Selected = true});
                    items.Add(new SelectListItem {Text = "Qatar", Value = "Qatar"});
                    items.Add(new SelectListItem {Text = "Syria", Value = "Syria"});
                    items.Add(new SelectListItem {Text = "Thailand", Value = "Thailand"});
                    items.Add(new SelectListItem {Text = "Turkey", Value = "Turkey"});
                    items.Add(new SelectListItem {Text = "Yemen", Value = "Yemen"});
                }
                <!-- content goes here -->
                <div class="row">
                    <div class="form-group " style="width: 45%; margin-left: 22px;">
                        <label> Country</label>
                        @Html.DropDownListFor(m => m.BasicInfo.Country, items, new {@class = "form-control profileVal", @id = "lc-Country"})
                    </div>
                    <div class="form-group" style="width: 45%; margin-left: 12px;">
                        <label> City</label>
                        <input type="text" class="form-control locisInfo" id="lc-City">
                    </div>
                    <div class="form-group" style="margin-bottom: 0px; width: 93%; margin-left: 20px;">
                        <input type="text" class="form-control locisInfo" id="lc-address" placeholder="Address" readonly="">
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" id="pac-input" placeholder="Search">
                    </div>
                    <div class="form-group">
                        <div id="map" style="margin-left: 12px; height: 300px; width: 560px"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <div class="btn-group btn-group-justified" role="group" aria-label="group button">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-default" data-dismiss="modal" role="button">Close</button>
                    </div>

                    <div class="btn-group" role="group">
                        <button type="button" id="saveLocInfo" class="btn btn-primary btn-hover-green" data-action="save" role="button" onclick="saveLocInfo()">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Other info -->
<div class="modal fade" id="otherInfoModel" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                <h3 class="modal-title" id="lineModalLabel">Edit Other Information</h3>
            </div>
            <div class="modal-body" style="height: 220px; padding: 4%;">

                <!-- content goes here -->
                <div class="form-group">
                    <label>About Yourself</label>
                   <textarea class="form-control otherInfoVal" id="intro-textarea"></textarea>
                </div>
                <!-- content goes here -->
                <div class="form-group">
                    <label> Language</label>
                    <select id="ai-lang">
                        <option value="Urdu">Urdu</option>
                        <option value="English" selected="">English</option>
                    </select>
                </div>

            </div>
            <div class="modal-footer">
                <div class="btn-group btn-group-justified" role="group" aria-label="group button">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-default" data-dismiss="modal" role="button">Close</button>
                    </div>

                    <div class="btn-group" role="group">
                        <button type="button" id="saveImage" class="btn btn-primary btn-hover-green" data-action="save" role="button" onclick=" saveOtherInfo() ">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Company info -->
<div class="modal fade" id="companyModel" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                <h3 class="modal-title" id="lineModalLabel">Edit Contractual Information</h3>
            </div>
            <div class="modal-body" style="height: 220px; padding: 4%;">

                <!-- content goes here -->
                <div class="form-group">
                    <label>Categories</label>
                    <select id="edit-cat-dd">
                        @{
                            foreach (var cat in Model.Categoreis)
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }
                        }
                    </select>
                </div>
                <!-- content goes here -->
                <div class="form-group">
                    <label>Contractor</label>
                    <select id="edit-cmp-dd">
                        @{
                            foreach (var cat in Model.Companies)
                            {
                                <option value="@cat.UserId">@cat.UserName</option>
                            }
                        }
                    </select>
                </div>

            </div>
            <div class="modal-footer">
                <div class="btn-group btn-group-justified" role="group" aria-label="group button">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-default" data-dismiss="modal" role="button">Close</button>
                    </div>

                    <div class="btn-group" role="group">
                        <button type="button" id="saveImage" class="btn btn-primary btn-hover-green" data-action="save" role="button" onclick=" SaveCompInfo() ">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@*Profile Upload*@
<div class="modal fade" id="profilePicModal" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                <h3 class="modal-title" id="">Profile Avatar</h3>
            </div>
            <div class="modal-body" style="padding-top: 0px;height: 185px;">
                <div class="form-group">
                    <form id="profilePicUploaderForm">
                        <img class="avatarThumb" width="100" height="100" style="margin-bottom: 5px;margin-top: 12px;" id="profile-pic-thumb" src="http://via.placeholder.com/50x60"/>
                        <div style="margin-top: 8px">
                            <input id="profilePicUploader" type="file" class="btn btn-default" style="display: inline-block;margin-bottom: 9px;" value="Upload Banner">
                        <input type="submit" class="btn btn-rounded" style="margin-left: 10px;margin-bottom: 9px;" value="Upload file" />
                        </div>
                    </form>
                </div>
            </div>

        </div>
    </div>
</div>

<!--************************************
Main End
*************************************-->
<script>
    var infoWindow, pos, map, selectedLoc={} , locName = undefined;
    var markersArray = [];
    var latlng;
    selectedLoc.lat= @Model.BasicInfo.Location.Latitude;
    selectedLoc.lng=@Model.BasicInfo.Location.Longitude;

    function addmarker() {
        var marker = new google.maps.Marker({
            position: latlng,
            title: 'new marker',
            draggable: true,
            map: map
        });
        markersArray.push(marker);
        map.setCenter(marker.getPosition());
    }

    function initAutocomplete() {
        var myLatLng = { lat: 31.582045, lng: 74.329376 };

        map = new google.maps.Map(document.getElementById('map'), {
            center: myLatLng,
            zoom: 14,
            mapTypeId: 'roadmap'
        });


        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);



        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function () {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            } else {
                selectedLoc = {};
                selectedLoc.lat = places[0].geometry.location.lat();
                selectedLoc.lng = places[0].geometry.location.lng();
                locName = places[0].formatted_address;
            }

            // Clear out the old markers.
            markers.forEach(function(marker) {
                marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function(place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }
                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                    map: map,
                    icon: icon,
                    title: place.name,
                    position: place.geometry.location
                }));

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });

        //Add listener
        google.maps.event.addListener(map, 'click', function (event) {
            clearOverlays();
            var marker = new google.maps.Marker({ position: event.latLng, map: map });
            selectedLoc = {};
            selectedLoc.lat = event.latLng.lat();
            selectedLoc.lng = event.latLng.lng();
            markersArray.push(marker);
            getAddress(selectedLoc.lat, selectedLoc.lng);
        });
    }
    function clearOverlays() {
        for (var i = 0; i < markersArray.length; i++) {
            markersArray[i].setMap(null);
        }
        markersArray.length = 0;
    }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCnRflqywXFgknXTzSG-BP3MmM8N1ZyOrQ&libraries=places&callback=initAutocomplete"></script>
<script src="~/Scripts/vendor/jquery-library.js"></script>
<script src="~/Scripts/Common.js"></script>
<script>
    function updateProfile() {
        if (!ValidateByClassName("val-required-contact")) {
            toastr.error("Please fill up data");
            return false;
        }
        var serverObj = {};
        serverObj.FullName = $("#fulName").val();
        serverObj.CNIC = $("#CNIC").val();
        serverObj.Mobile = $("#Mobile").val();
        serverObj.Country = $("#Country").val();
        serverObj.City = $("#City").val();
        serverObj.Intro = $("#Intro").val();
        serverObj.Language = $("#Lang").val();

        $.ajax({
            url: 'Update',
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: JSON.stringify(serverObj),
            success: function(data) {
                toastr.success("Profile Updated");
            },
            error: function(data) {}
        });

    }

    function openMapforProfile() {
        setTimeout(function() {
            google.maps.event.trigger(map, 'resize');
            map.setCenter(pos);
            var lngLat = $('#td-cords').val().split('_');
            latlng = new google.maps.LatLng(parseFloat(lngLat[0]), parseFloat(lngLat[1]));
            addmarker();
            openEditLocInfoModel();
        }, 1000);
    }

    function saveLoc() {
        if (selectedLoc == undefined) {
            toastr.warning("Please select location");
        } else {
            $('#addressmodel').modal('hide');
            $('#locationCord').val((selectedLoc.lat + "_" + selectedLoc.lng));
            if (locName === undefined) {
                getAddress(selectedLoc.lat, selectedLoc.lng);
            } else {
                $('#locationName').val(locName);
            }
        }
        return;
    }

    function getAddress(lat, lng) {
        var geocoder = new google.maps.Geocoder(); // create a geocoder object
        var location = new google.maps.LatLng(lat, lng); // turn coordinates into an object
        geocoder.geocode({ 'latLng': location }, function(results, status) {
            if (status === google.maps.GeocoderStatus.OK) { // if geocode success
                var add = results[0].formatted_address; // if address found, pass to processing function
                $('#lc-address').val(add);
            }
        });
    }

    $(window).scroll(function() {
        if ($(window).scrollTop() > $(window).height() / 2) {
            $('#tg-updateall').css('display', 'inline-block');

        } else {
            $('#tg-updateall').hide();
        }
    });
</script>

 @*Basic info*@
<script>
    function openEditBasicInfoModel() {
        var name = $("#td-fullname").text();
        var cnic = $("#td-CNIC").text();
        var mobile = $("#td-mobile").text();
        var email = $("#td-email").text();

        $("#bi-fullname").val(name);
        $("#bi-cnic").val(cnic);
        $("#bi-mobile").val(mobile);
        $("#bi-email").val(email);
    }

    function saveBasicInfo() {
        if (!ValidateByClassName('binfoVal')) {
            toastr.warning("Please fill up the data");
            return;
        }

        var serverObj = {};
        serverObj.FullName = $("#bi-fullname").val();
        serverObj.CNIC = $("#bi-cnic").val();
        serverObj.Mobile = $("#bi-mobile").val();
        serverObj.Email = $("#bi-email").val();

        postMydata(serverObj, 'UpdateBasicInfo', setBackBasicInfo);
    }

    function setBackBasicInfo() {
        toastr.success("Information updated");
        $("#td-fullname").text($("#bi-fullname").val());
        $("#ud-profile-name").text($("#bi-fullname").val());
        $("#td-CNIC").text($("#bi-cnic").val());
        $("#td-mobile").text($("#bi-mobile").val());
        $("#td-email").text($("#bi-email").val());

        hideModel('basicInfoModel');
    }

    function postMydata(serverObj, url, successFunc) {
        $.ajax({
            url: url,
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: JSON.stringify(serverObj),
            success: successFunc,
            error: function(data) {
                toastr.error("Profile failed to update");
            }
        });
    }

</script>

@*Location info*@
<script>
    function openEditLocInfoModel() {
        var country = $("#td-country").text();
        var city = $("#td-city").text();
        var address = $("#td-address").text();
        if (country != null && country !== undefined) {
            $("#lc-Country").val(country);
        }
       
        $("#lc-City").val(city);
        $("#lc-address").val(address);

    }

    function saveLocInfo() {
        if (!ValidateByClassName('locisInfo')) {
            toastr.warning("Please fill up the data");
            return;
        }
        var cords = selectedLoc.lat + "_" + selectedLoc.lng;
        var dbuser = {};
        dbuser.Country = $("#lc-Country").val();
        dbuser.City = $("#lc-City").val();
        dbuser.LocTempo = cords;
        dbuser.LocationName = $("#lc-address").val();
        postMydata(dbuser, 'UpdateLocationInfo', setBackLocInfo);
    }

    function setBackLocInfo() {
        toastr.success("Information updated");
        $("#td-country").text($("#lc-Country").val());
        $("#td-city").text($("#lc-City").val());
        $("#td-address").text($("#lc-address").val());
        $("#ud-profile-address").text($("#lc-address").val());
        var cords = selectedLoc.lat + "_" + selectedLoc.lng;
        $('#td-cords').val(cords);

        hideModel('locationModel');
    }

    function postMydata(serverObj, url, successFunc) {
        $.ajax({
            url: url,
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: JSON.stringify(serverObj),
            success: successFunc,
            error: function(data) {
                toastr.error("Profile failed to update");
            }
        });
    }

</script>

@*Other info*@
<script>
    function openEditOtherInfoModel() {
        var intro = $("#td-intro").text();
        var lang = $("#td-lang").text().replace(/\s/g, '');

        $("#intro-textarea").val(intro);
        $("#ai-lang").val(lang);
    }

    function saveOtherInfo() {
        if (!ValidateByClassName('otherInfoVal')) {
            toastr.warning("Please fill up the data");
            return;
        }

        var dbuser = {};
        dbuser.Intro = $("#intro-textarea").val();
        dbuser.Language = $("#ai-lang").val().replace(/\s/g, '');

        postMydata(dbuser, 'UpdateOtherInfo', setBackOtherInfo);
    }

    function setBackOtherInfo() {
        toastr.success("Information updated");
        $("#td-intro").text($("#intro-textarea").val());
        $("#td-lang").text($("#ai-lang").val());


        hideModel('otherInfoModel');
    }

    function postMydata(serverObj, url, successFunc) {
        $.ajax({
            url: url,
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: JSON.stringify(serverObj),
            success: successFunc,
            error: function(data) {
                toastr.error("Profile failed to update");
            }
        });
    }

</script>

@*Company info*@
<script>
    var categoreis = @Html.Raw(Json.Encode(Model.Categoreis));
    var companies = @Html.Raw(Json.Encode(Model.Companies));

    function openEditContractorModel() {
        var catId = $("#td-cate").attr('data-catId');
        var cmpId = $("#td-companyname").attr('data-conId');

        $('#edit-cat-dd').val(catId);
        $('#edit-cmp-dd').val(cmpId);
    }

    function SaveCompInfo() {
        var dbuser = {};
        dbuser.CategoryId = $('#edit-cat-dd').val();
        dbuser.ContractorId = $('#edit-cmp-dd').val();

        postMydata(dbuser, 'UpdateCompanyInfo', setBackCompanyInfo);
    }

    function setBackCompanyInfo() {
        toastr.success("Information updated");

        $("#td-cate").attr('data-catId', $('#edit-cat-dd').val()).text($('#edit-cat-dd option:selected').text());
        $("#td-companyname").attr('data-conId', $('#edit-cmp-dd').val()).text($('#edit-cmp-dd option:selected').text());

        hideModel('companyModel');
    }

    function postMydata(serverObj, url, successFunc) {
        $.ajax({
            url: url,
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: JSON.stringify(serverObj),
            success: successFunc,
            error: function(data) {
                toastr.error("Profile failed to update");
            }
        });
    }

</script>

@*Profile Pic*@
<script>

    function openProfilePicDialoge() {
        
    }
    $('#profilePicUploaderForm').submit(function() {
       
        var formdata = new FormData(); //FormData object
        var fileInput = document.getElementById('profilePicUploader');
        //Iterating through each files selected in fileInput
        for (i = 0; i < fileInput.files.length; i++) {
            //Appending each file to FormData object
            formdata.append(fileInput.files[i].name, fileInput.files[i]);
        }
        //Creating an XMLHttpRequest and sending
        var xhr = new XMLHttpRequest();
        xhr.open('POST', 'Upload');
        xhr.send(formdata);
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4 && xhr.status == 200) {
                toastr.success('Profile picture uploaded');
                setTimeout(function() {
                    location.reload();
                },1000);
            }
        }
        return false;
    });

    $('.li-profile-setting').addClass('tg-active');

    $('#profilePicUploader').change(function(){
        var input = this;
        var url = $(this).val();
        var ext = url.substring(url.lastIndexOf('.') + 1).toLowerCase();
        if (input.files && input.files[0]&& (ext == "gif" || ext == "png" || ext == "jpeg" || ext == "jpg")) 
        {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#profile-pic-thumb').attr('src', e.target.result);
            }
            reader.readAsDataURL(input.files[0]);
        }
        else
        {
            $('#profile-pic-thumb').attr('src', '/assets/no_preview.png');
        }
    });
</script>
