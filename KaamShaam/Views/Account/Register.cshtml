@model KaamShaam.LocalModels.RegisterPageWraper
@{
    ViewBag.Title = "Register";

}


<!--************************************
        Inner Page Banner Start
*************************************-->
<div class="tg-innerpagebanner">
    <div class="container">
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="tg-pagetitle">
                    <h1>Login / Register</h1>
                </div>
                <ol class="tg-breadcrumb">
                    <li><a href="#">Home</a></li>
                    <li class="tg-active">Login - Register</li>
                </ol>
            </div>
        </div>
    </div>
</div>
<!--************************************
        Inner Page Banner End
*************************************-->
<!--************************************
        Main Start
*************************************-->
<main id="tg-main" class="tg-main tg-paddingzero tg-haslayout" style="">
    <!--************************************
    Login Register Start
    *************************************-->
    <div class="tg-main-section tg-haslayout">
        <div class="container">
            <div class="row">
                <div id="tg-content" class="tg-content">
                    @using (Html.BeginForm("Register", "Account", FormMethod.Post, new {@class = "form-horizontal", role = "form", id = "userRegistration"}))
                    {
                        <div class="col-xs-12 col-sm-8 col-md-8 col-lg-8">

                            <fieldset>
                                <ul class="tg-tabnav" role="tablist">
                                    <li role="presentation" class="active" style="margin-left: 27%;">
                                        <a href="#regularuser" data-toggle="tab">
                                            <span class="lnr lnr-user"></span>
                                            <div class="tg-navcontent">
                                                <h3>Regular Single User</h3>
                                                <span>Register As Service Seeker</span>
                                            </div>
                                        </a>
                                    </li>
                                    @*@Html.AntiForgeryToken()*@

                                </ul>
                                <div class="tg-themetabcontent tab-content">
                                    <div class="tab-pane active fade in" id="regularuser">
                                        <div class="form-group">

                                        </div>
                                        <div class="form-group">
                                            @Html.TextBoxFor(m => m.RegisterViewModel.FullName, new {name = "fulName", @class = "form-control", @placeholder = "Full name"})
                                        </div>

                                        @{
                                            var items = new List<SelectListItem>();
                                            items.Add(new SelectListItem {Text = "User", Value = "User"});
                                            items.Add(new SelectListItem {Text = "Contractor", Value = "Contractor", Selected = true });
                                            //items.Add(new SelectListItem {Text = "Vendor", Value = "Vendor"});

                                            <div class="form-group">
                                                <span class="tg-select customField">
                                                @Html.DropDownListFor(m => m.RegisterViewModel.Type, items, new {@class = "form-control", onchange = "UserTypeChnaged()", @id="userTypeDd" })
                                                </span>
                                            </div>

                                            var companies = new List<SelectListItem>();
                                            if (Model.Vendors != null && Model.Vendors.Any())
                                            {
                                                foreach (var ven in Model.Vendors)
                                                {
                                                    companies.Add(new SelectListItem { Text = ven.FullName, Value = ven.Id });
                                                }
                                            }

                                            List<SelectListItem> cats = new List<SelectListItem>();
                                            if (Model.Categories != null && Model.Categories.Any())
                                            {
                                                foreach (var cat in Model.Categories)
                                                {
                                                    cats.Add(new SelectListItem { Text = cat.Name, Value = cat.Id.ToString() });
                                                }
                                            }

                                        }
                                      
                                       
                                       
                                        <div class="form-group">
                                            @Html.TextBoxFor(m => m.RegisterViewModel.Email, new {name = "Email", @class = "form-control ", @placeholder = "Email"})
                                        </div>
                                        <div class="form-group">
                                            @Html.PasswordFor(m => m.RegisterViewModel.Password, new {name = "Password", @class = "form-control customField", @placeholder = "Password"})
                                        </div>
                                        <div class="form-group">
                                            @Html.PasswordFor(m => m.RegisterViewModel.ConfirmPassword, new {name = "ConfirmPassword", @class = "form-control", @placeholder = "Confirm Password"})
                                        </div>

                                        <div class="form-group ">
                                            @Html.TextBoxFor(m => m.RegisterViewModel.LocationName, new {@readonly = "readonly", @id = "locationName", onclick = "openMap()", name = "Loc", @class = "form-control customField", @placeholder = "Click to pick Location", data_toggle = "modal", data_target = "#addressmodel"})
                                            @Html.HiddenFor(m => m.RegisterViewModel.LocationCord, new {@id = "locationCord"})

                                        </div>

                                        <div class="form-group contractorEle notUserField">
                                            <span class="tg-select ">
                                                @Html.DropDownListFor(m => m.RegisterViewModel.CategoryId, cats, new { @class = "form-control " })
                                            </span>
                                        </div>
                                        @*<div class="form-group contractorEle">
                                            <span class="tg-select customField">
                                                @Html.DropDownListFor(m => m.RegisterViewModel.ContractorId, companies, new { @class = "form-control" })
                                            </span>
                                        </div>*@
                                        <div class="form-group notUserField">
                                            @Html.TextBoxFor(m => m.RegisterViewModel.CNIC, new { name = "CNIC", @class = "form-control customField", @placeholder = "CNIC" })
                                        </div>
                                        <div class="form-group">
                                            @Html.TextBoxFor(m => m.RegisterViewModel.Mobile, new { name = "Mobile", @class = "form-control", @placeholder = "Mobile", @id = "mNumber" })
                                        </div>
                                        
                                      

                                        <div class="form-group" style="margin-left: 32px; margin-bottom: 0px;">
                                            <div class="tg-checkbox" style="margin-top: -28px;">
                                                <input type="checkbox" id="terms">
                                                <label for="terms">I have read the <a href="#">Terms &amp; Conditions</a> and accept them</label>
                                            </div>
                                        </div>
                                       
                                        <button class="tg-btn" style="" type="button" onclick="submitRegis()">Register Now</button>
                                        @Html.ValidationSummary("", new {@class = "text-danger"})


                                        <ul class="tg-socialicons tg-socialsharewithtext" style="margin-top: 12px;">
                                            <li class="tg-facebook">
                                                <a class="tg-roundicontext" href="javascript:void(0);">
                                                    <em class="tg-usericonholder">
                                                        <i class="fa fa-facebook-f"></i>
                                                        <span>facebook</span>
                                                    </em>
                                                </a>
                                            </li>
                                            <li class="tg-twitter">
                                                <a class="tg-roundicontext" href="javascript:void(0);">
                                                    <em class="tg-usericonholder">
                                                        <i class="fa fa-twitter"></i>
                                                        <span>twitter</span>
                                                    </em>
                                                </a>
                                            </li>
                                            <li class="tg-linkedin">
                                                <a class="tg-roundicontext" href="javascript:void(0);">
                                                    <em class="tg-usericonholder">
                                                        <i class="fa fa-linkedin"></i>
                                                        <span>linkdin</span>
                                                    </em>
                                                </a>
                                            </li>
                                            <li class="tg-googleplus">
                                                <a class="tg-roundicontext" href="javascript:void(0);">
                                                    <em class="tg-usericonholder">
                                                        <i class="fa fa-google-plus"></i>
                                                        <span>googl+</span>
                                                    </em>
                                                </a>
                                            </li>
                                            <li class="tg-tumblr">
                                                <a class="tg-roundicontext" href="javascript:void(0);">
                                                    <em class="tg-usericonholder">
                                                        <i class="fa fa-tumblr"></i>
                                                        <span>tumblr</span>
                                                    </em>
                                                </a>
                                            </li>
                                            <li class="tg-vimeo">
                                                <a class="tg-roundicontext" href="javascript:void(0);">
                                                    <em class="tg-usericonholder">
                                                        <i class="fa fa-vimeo"></i>
                                                        <span>vimeo</span>
                                                    </em>
                                                </a>
                                            </li>
                                        </ul>
                                    </div>

                                </div>
                            </fieldset>
                        </div>
                    }
                    <div class="col-xs-12 col-sm-4 col-md-4 col-lg-4">
                        <div class="tg-loginarea">
                            <div class="tg-bordertitle">
                                <h3>Login Now</h3>
                            </div>
                            <fieldset>
                                @using (Html.BeginForm("Login", "Account", FormMethod.Post, new {@class = "form-horizontal", role = "form", id = "userRegistration"}))
                                {
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.LoginViewModel.Email, new {name = "Email", @class = "form-control", @placeholder = "Email"})
                                    </div>
                                    <div class="form-group">
                                        @Html.PasswordFor(m => m.LoginViewModel.Password, new {name = "Password", @class = "form-control", @placeholder = "Password"})
                                    </div>
                                    <div class="form-group">
                                        <button class="tg-btn tg-btn-lg" type="submit">Login Now</button>
                                    </div>

                                }
                                <a style="cursor: pointer" class="tg-btnforgotpass" onclick=" passforgot() ">Forgot your password?</a>
                            </fieldset>


                        </div>
                    </div>
                    <style>
                        .customField {
                            margin-left: 45px !important;
                        }
                           #map {
        height: 100%;
      }
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
      }

      #infowindow-content .title {
        font-weight: bold;
      }

      #infowindow-content {
        display: none;
      }

      #map #infowindow-content {
        display: inline;
      }

      .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
      }
      .modal-backdrop{
    z-index: 10;        
}​

      #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
         z-index: 20;

      }

      .pac-controls {
        display: inline-block;
        padding: 5px 11px;
      }

      .pac-controls label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
      }

      #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
      }

      #pac-input:focus {
        border-color: #4d90fe;
      }

      #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
      }
      #target {
        width: 345px;
      }
     .modal{
    z-index: 20;   
}

                    </style>

                </div>
            </div>
        </div>
    </div>
    <!--************************************
    Login Register End
    *************************************-->
</main>


<!-- line modal -->
<div class="modal fade" id="addressmodel" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
                <h3 class="modal-title" id="lineModalLabel">Add Location</h3>
            </div>
            <div class="modal-body" style="height: 460px;">

                <!-- content goes here -->
                <div class="form-group">
                    <input type="text" class="form-control" id="pac-input" placeholder="Search">
                </div>
                <div class="form-group">
                    <div id="map" style="height: 400px; width: 570px"></div>
                </div>
            </div>
            <div class="modal-footer">
                <div class="btn-group btn-group-justified" role="group" aria-label="group button">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-default" data-dismiss="modal" role="button">Close</button>
                    </div>

                    <div class="btn-group" role="group">
                        <button type="button" id="saveImage" class="btn btn-primary btn-hover-green" data-action="save" role="button" onclick="saveLoc()">Update</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!--************************************
Main End
*************************************-->
<script>
    var infoWindow, pos, map, selectedLoc=undefined,locName=undefined;
    var markersArray = [];
    function initAutocomplete() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 31.476535115002306, lng: 74.32158172130585 },
            zoom: 15,
            mapTypeId: 'roadmap'
        });
        infoWindow = new google.maps.InfoWindow;
        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(browserHasGeolocation ?
                'Error: The Geolocation service failed.' :
                'Error: Your browser doesn\'t support geolocation.');
            infoWindow.open(map);
        }
        // Try HTML5 geolocation.
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                debugger;
                pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                getAddress(position.coords.latitude, position.coords.longitude);

            }, function() {
                handleLocationError(true, infoWindow, map.getCenter());
            },{
            maximumAge:Infinity,
            timeout:5000
        });
        } else {
            alert("Please Allow accessing your location");
            // Browser doesn't support Geolocation
            // handleLocationError(false, infoWindow, map.getCenter());
        }
    

      

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function () {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            } else {
                selectedLoc = {};
                selectedLoc.lat = places[0].geometry.location.lat();
                selectedLoc.lng = places[0].geometry.location.lng();
                locName = places[0].formatted_address;
            }

            // Clear out the old markers.
            markers.forEach(function(marker) {
                marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function(place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }
                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                    map: map,
                    icon: icon,
                    title: place.name,
                    position: place.geometry.location
                }));

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });

        //Add listener
        google.maps.event.addListener(map, 'click', function (event) {
            clearOverlays();
            var marker = new google.maps.Marker({ position: event.latLng, map: map });
            selectedLoc = {};
            selectedLoc.lat = event.latLng.lat();
            selectedLoc.lng = event.latLng.lng();
            markersArray.push(marker);
        });
    }
    function clearOverlays() {
        for (var i = 0; i < markersArray.length; i++) {
            markersArray[i].setMap(null);
        }
        markersArray.length = 0;
    }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCnRflqywXFgknXTzSG-BP3MmM8N1ZyOrQ&libraries=places&callback=initAutocomplete"></script>
<script src="~/Scripts/vendor/jquery-library.js"></script>
<script>
    function passforgot() {
        toastr.success("Email has been sent to you containing instructions.");
    }
    //  $('.contractorEle').hide();
    function submitRegis() {
        if (!$('#terms').is(":checked")) {
            toastr.warning('Please check terms ');
            return false;
        } 
        var loc = $('#locationName').val();
        if (loc == undefined || loc === "") {
            toastr.warning("Please select location");
            return false;
        }
        var typeval = $('#userTypeDd').val();
        if (typeval === "Contractor") {
            
        }
        var isnum = /^\d+$/.test($('#mNumber').val());
        if (!isnum) {
            toastr.warning("Add valid phone number (0-9)");
            return false;
        }
        $("#userRegistration").submit();
    };

    function saveLoc() {
        if (selectedLoc == undefined) {
            toastr.warning("Please select location");
        } else {
            $('#addressmodel').modal('hide');
            $('#locationCord').val((selectedLoc.lat + "_" + selectedLoc.lng));
            if (locName === undefined) {
                getAddress(selectedLoc.lat, selectedLoc.lng);
            } else {
                $('#locationName').val(locName);
            }
        }
        return;
    }
   
   
    function openMap() {
        setTimeout(function () {
            google.maps.event.trigger(map, 'resize');
           if (selectedLoc === undefined) {
               infoWindow.setPosition(pos);
               infoWindow.setContent('Your Location');
               infoWindow.open(map);
               map.setCenter(pos);
           }
        }, 1000);
    }

    function UserTypeChnaged() {
        hideUserControlls();
    }
    function hideUserControlls() {
        var val = $('#userTypeDd').val();
        //if (val === "Contractor") {
        //    $('.contractorEle').show();
        //} else {
        //    $('.contractorEle').hide();
        //}


        if (val === "User") {
            $(".notUserField").hide();
        } else {
            $(".notUserField").show();
        }
    }

    function getAddress(lat, lng) {
        var geocoder  = new google.maps.Geocoder();             // create a geocoder object
        var location = new google.maps.LatLng(lat, lng);    // turn coordinates into an object          
        geocoder.geocode({ 'latLng': location }, function(results, status) {
            if (status === google.maps.GeocoderStatus.OK) { // if geocode success
                var add = results[0].formatted_address; // if address found, pass to processing function
                $('#locationName').val(add);
            }
        });
    }

    hideUserControlls();
</script>